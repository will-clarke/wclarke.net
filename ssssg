#!/bin/sh

main() {
    # Some housekeeping...
    rm -rf dst tmp && mkdir -p src dst/posts dst/tags tmp/tags && touch src/config.yaml

    # Generate tmp/index.md & tmp/posts.md & tmp/tags.md & tmp/tags/example-tag.md files.
    # using our posts as a source
    find src/posts -type f -name "*.md" | sort -r | generate_tmp_files

    # Generate tags.html file. Grab the list of tags from our tmp/tags directory, then chuck them
    # all into a tmp directory, which we then sort & pandoc-ise.
    find tmp/tags -type f -print0 | xargs -0 -I {} basename {} ".md" | while read -r tag; do
        echo "- [$tag](tags/$tag.html) ($(wc -l < tmp/tags/"$tag".md | xargs))" >> tmp/tags-unsorted.md
        tags_file=$(cat "tmp/tags/$tag.md")
        printf -- "---\ntitle: %s tags\n---\n\n%s" "$tag" "$tags_file" > "tmp/tags/$tag.md"
    done
    sort tmp/tags-unsorted.md >> tmp/tags.md && rm tmp/tags-unsorted.md

    # Add h1 s for tags pages
#     find tmp/tags -type f -print0 | xargs -0 -I {} basename {} ".md" | while read -r tag; do
# # for tag in $(find tmp/tags -type f -print0 | xargs -0 -I {} basename {} ".md"); do
#     done

    # Find all markdown files and turn them into corresponding html in the dst path.
    # for file in $(find src tmp -type f -name "*.md"); do
    find src tmp -type f -name "*.md" | while read -r file; do
        md_file_to_html_file "$file" > "$(src_to_dst_path "$file")"
    done

    # md_file_to_html_file tmp/tags.md > dst/tags.html

    generate_rss_feed > dst/index.xml

    cp -r src/css dst/css

    echo "Generated $(find dst | wc -l) files"
}

md_file_to_html_file() {
    input_file="$1"
    pandoc \
        --css="/css/style.css" \
        --include-before-body src/_top.html \
        --include-after-body src/_bottom.html \
        --title "$(config_for title)" \
        --to=html5  \
        "$input_file"
}

src_to_dst_path() {
    echo "$1" | sed -e's/src/dst/' -e 's/tmp/dst/' -e's/\.md$/\.html/'
}

# This function creates three new files having parsed all the posts.
generate_tmp_files() {
    # We initially load up some sane front-matter defaults for pandoc.
    printf -- "---\ntitle: Home\n---\n\n%b\n\n---\n\n" "$(config_for index_md)" > tmp/index.md
    printf -- "---\ntitle: Posts\n---\n" > tmp/posts.md
    printf -- "---\ntitle: Tags\n---\n" > tmp/tags.md
    # Looping through the posts...
    while read -r file_path
    do
        # Assigning variables from the front-matter of the markdown post
        post_md_file=$(cat "$file_path")
        title=$(echo "$post_md_file" | grep -iE '^title: ' | cut -d' ' -f 2-)
        description=$(echo "$post_md_file" | grep -iE '^description: ' | cut -d' ' -f 2-)
        post_date=$(echo "$post_md_file" | grep -iE '^date: ' | cut -d' ' -f 2-)
        tags=$(echo "$post_md_file" | grep -iE '^tags: ' | cut -d' ' -f 2-)

        # Calculate the ultimate root paths for the generated html files
        dst_path=$(echo "$file_path" | sed -e's#src/##' -e's/\.md$/\.html/' -e's#tags/##')
        # A list of tags converted to a list of markdown links
        linked_tags=$(echo "$tags" | xargs -n1 -I {} echo "[{}](/tags/{}.html)")

        printf "# [%s](%s)\n%s\n%s\n\n" "$title" "$dst_path" "$description" "$linked_tags" >> tmp/index.md
        printf -- "- *%s* [%s](%s)\n\n" "$post_date" "$title" "$dst_path" >> tmp/posts.md
        echo "$tags" | xargs -n1 -I "{tag}" sh -c "echo \"- *[$title](/$dst_path)* $post_date\" >> tmp/tags/{tag}.md"


        echo "<item>
<title>$(echo $title | xml_encode)</title>
<link>$(config_for base_url)/$(echo "$dst_path" | xml_encode)</link>
<pubDate>$(gdate -d "$post_date" -R)</pubDate>
<guid>$(config_for base_url)/$(echo "$dst_path" | xml_encode)</guid>
<description>$(echo "$post_md_file" | tail -n +7 | xml_encode | pandoc --from markdown --to=html5 )</description>
</item>" >> tmp/index.xml
    done
}
xml_encode() {
    sed "s/\&/\&amp;/g;s/>/\&gt;/g;s/</\&lt;/g;s/'/\&apos;/g"
}

config_for() {
    grep "^$1: " src/config.yaml | cut -d' ' -f2-
}

generate_rss_feed() {
    echo "<rss xmlns:atom=\"http://www.w3.org/2005/Atom\" version=\"2.0\">
<channel>
<title>$(config_for title)</title>
<link>$(config_for base_url)</link>
<description>$(config_for rss_description)</description>
<generator>ssssg</generator>
<lastBuildDate>$(date -R)</lastBuildDate>
<atom:link href=\""$(config_for base_url)/index.xml"\" rel=\"self\" type=\"application/rss+xml\"/>"
    cat tmp/index.xml
    echo "</channel></rss>"
}

main
