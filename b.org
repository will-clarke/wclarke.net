* Blog Ideas
** Get things done > tech used
:PROPERTIES:
:EXPORT_FILE_NAME: getting-things-done
:EXPORT_DATE: 2019-09-10
:END:

Technology is a lever. It lets us do things.

As Steve Jobs said:
> Man is a toolmaker, has the ability to make a tool to amplify the amount of inherent ability that he has.

{{< youtube 4x8wTj-n33A >}}

The whole point of technology is that it let's us *do* things.

As a software engineer, it can be tempting to fall into the trap of spending loads of time optimising your developer environments.

- Which shiny new thing should I use?
- Is there a vim plugin to save me 3 seconds per day?
- Can I [[https://github.com/NARKOZ/hacker-scripts][automate a coffee machine from my terminal?]] 

These are all loads of fun, and you learn loads by doing them... but the end result is just that you'll be better at doing a (potentially very specific) job in the future.

Technology can impact every facet of our lives for enormous good. We have the ability to improve the world *loads*... and there's more to technology than just a slick development environment. Maybe try finishing that side-project, or sitting down and thinking what you really want to *achieve*, rather than *how*.

** Defaults are good. Try them out!
:PROPERTIES:
:EXPORT_FILE_NAME: defaults-are-good
:EXPORT_DATE: 2019-08-10
:END:

Most defaults have been carefully thought out. It's worth at least looking over them before deciding that they're useless & old-fashioned.

While it's true that many defaults are the result of some old-fashioned constraints (eg. QWERTY keyboard or the vim homerow being one key to the left), it may be worth your time just accepting their flawed premises and trying to use them anyway. There's value if people are also using them.

If your vim config is totally unique to you (or you're a dvorak user), you'll have a hard time pairing with someone else or SSH-ing into a server.

The creators of customisable products have hopefully thought long and hard about the best way to use *their* creations. They'll be far more invested in making it work well than you will and they'll have a vision of how they want their products being used.

Sometimes it's sensible to just accept defaults.

** Boring product names FTW
:PROPERTIES:
:EXPORT_FILE_NAME: boring-product-names-ftw
:EXPORT_DATE: 2019-07-11
:END:
In a company I worked at recently, we released a fantastic shiny-new thing.
It was a smaller version of another product called `cargo`, which did something related to packaging.

The question is, what should we call it?
Here are some names we came up with:
  - parcel
  - package
  - freight
  - cargo-mini
  - gateway
  - specific-and-boring-product-description
  - catalyst

Any guesses which are the best names?

Our developers and users already knew about `cargo`. They had the mental context in their head. Because of this, `cargo-mini` makes sense as a smaller version of `cargo`.
I'm quite a fan of absurdly verbose but specific names, so I'm also a fan of `specific-and-boring-product-description`

** document EVERYTHING!!!

   code != documentation.

   Processes, etc..
   information should not live inside people. Bus / lottery factor!
** use cron jobs
** automate repetitive tasks
   but don't go overboard.
   maybe try vim

** We should all know git
** jq is a cool tool
   #+begin_src bash
     .Chart.Purchases | map((. | first | tostring) + ", " + (. | last  | tostring) )
   #+end_src
** Have a broad understanding of what different tools can do for you
   eg. jq
** how to find rows which don't exist in a table
   #+begin_src sql
     WITH expected(email) AS (
       VALUES
       ('bob'),
       ('andrea')
     )
     SELECT email
       FROM expected
              LEFT JOIN table t1
                  ON t1.email_address = expected.email;
   #+end_src
** learn some basic sql
** learn some basic excel / google spreadsheet operations
   Use the right tool for the job!
** Record shell commands / sql queries you run
   they may be useful in the future!
   Documentation!
** get comfortable creating bash executables
** keep track of handy hints
   eg.
   #+begin_src sh
     #!/usr/bin/env sh
     [ `whoami` = root ] || { sudo "$0" "$@"; exit $?; }
   #+end_src
** Take logging seriously
   [2020-01-16 Thu 08:35]
** learn the difference between functions & methods
   [2020-01-16 Thu 08:37]
** `.env` files are your friend
   [2020-01-16 Thu 08:37]
** use ssh git github
   git config --global url."git@github.com:".insteadOf "https://github.com/"
   [2020-01-16 Thu 08:38]
** Priotisation is stupidly important.
   Your job isn't to just make stuff. It's to make the *right* stuff
   [2020-01-16 Thu 08:38]
** Learn the basics of HTTP
   Get comfy with command-line cURL request
   [2020-01-16 Thu 08:39]
** map out all domain concepts before doing anything involving them
   You need to *understand* things before you can fix / improve / work on them
   [2020-01-16 Thu 08:39]
** have fun along the way
   [2020-01-16 Thu 08:40]
** try static typing.. it can catch loads of bugs
   [2020-01-16 Thu 08:40]
** guids > ids normally
   [2020-01-16 Thu 08:40]
** get familiar with ssh & ~/.ssh/config  && /etc/hosts files
   [2020-01-16 Thu 08:41]
** screenshots help a lot
   [2020-01-16 Thu 08:49]
** over communicationn is tricky
   [2020-01-16 Thu 08:49]
** formatting & style guides are overrated
   [2020-01-16 Thu 08:49]
** don't over-optimise
   [2020-01-16 Thu 08:50]
** don't over-promise
   [2020-01-16 Thu 08:50]
** haters gonna hate
   [2020-01-16 Thu 08:54]
** scepticism is good
   [2020-01-16 Thu 08:55]
** read documentation - not just stack overflow
   [2020-01-16 Thu 09:38]
** adding sql indexes is cool
   [2020-01-16 Thu 09:44]
** Get used to using AWS / GCP
   [2020-01-16 Thu 12:59]
** Don't just build things! Complete them! Market them!
   Try to create a side-hustle or business or portfolio
   [2020-01-16 Thu 12:59]
** Invest time in staring at Trello / Jira. You're also a product person
   [2020-01-16 Thu 13:06]
** lambdas are the future! serverless FTW
   [2020-01-16 Thu 13:06]
** Keep learning, reading and absorbing stuff
   [2020-01-16 Thu 13:06]
** Learn more than one language. Get a broad base
   [2020-01-16 Thu 13:07]
** Enjoy it!
   [2020-01-16 Thu 13:07]
** Ask stupid questions
   Be confident
   [2020-01-16 Thu 13:08]
** Be confident
   you're getting paid to work with people rather than be shy or polite
   [2020-01-16 Thu 13:09]
** Move slowly
   but deliberately
   [2020-01-16 Thu 13:10]
** keep things simple

do things the simple way
only generalise when you have to
don't shy away from doing this manually
 [2020-01-16 Thu 13:11]
** Don't be scared to read some source code & try to understand it
 [2020-01-16 Thu 13:12]
** time-box things.
Don't get carried away and spend all your time doing something inefficient
 [2020-01-16 Thu 13:12]
** Reevaluate priorities reguarly
pomodoro technique
 [2020-01-16 Thu 13:13]
** Sometimes you just need a load of time to do things
 [2020-01-16 Thu 13:13]
** learn some s3 command lines
 [2020-01-21 Tue 21:35]
https://github.com/aws-samples/aws-modern-application-workshop/ is good
** Learn the basics - don't take shortcuts.
Eg. implement password hashing and salting yourself, rather than a library. It's important to see how stuff works
 [2020-01-22 Wed 08:03]
** Document starting a new Hugo blog
 [2020-01-27 Mon 07:36]
** Document X230 set up!
 [2020-01-27 Mon 07:36]
** Standing desks are cool
 [2020-01-27 Mon 07:44]
** exercise is important - just walking's fine. good for clearing the mind
 [2020-01-27 Mon 07:44]
** Wake up early and do stuff in the morning
 [2020-01-27 Mon 07:44]
** Get used to using docker!Â±
docker run -it --rm alpine mkpasswd
 [2020-01-28 Tue 15:54]
** passwd & /etc/shadow & /etc/passwd
 [2020-01-29 Wed 07:28]
** use git everywhere!
 [2020-02-03 Mon 13:41]
